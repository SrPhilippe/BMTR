import React, { useState, useEffect, useRef } from 'react'
import { Card, CardContent } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import { Label } from '@/components/ui/label'
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs'

export default function TriaxxApp() {
  const today = new Date()
  const day = today.getDate()
  const month = today.getMonth() + 1
  const year = today.getFullYear() % 100

  // Principal state
  const [principalDay, setPrincipalDay] = useState(String(day))
  const [principalMonth, setPrincipalMonth] = useState(String(month))
  const [principalPassword, setPrincipalPassword] = useState('')
  const monthRef = useRef(null)

  // Periódica state
  const [periodicInput, setPeriodicInput] = useState('')
  const [periodicPassword, setPeriodicPassword] = useState('')

  // NewPass state (Nova aba)
  // newPassSN conterá somente os 5 últimos dígitos do serial
  const [newPassSN, setNewPassSN] = useState('')
  const [newPassL, setNewPassL] = useState('')
  // newPassHex: array com 10 elementos – cada um representando um byte (2 dígitos em hexadecimal)
  const [newPassHex, setNewPassHex] = useState(new Array(10).fill(''))
  const [newPassPassword, setNewPassPassword] = useState('')
  // Refs para os 10 inputs de HEX – para passar o foco automaticamente
  const newPassHexRefs = useRef([])

  useEffect(() => {
    const savedTheme = localStorage.getItem('theme')
    if (savedTheme === 'dark') {
      document.documentElement.classList.add('dark')
    } else {
      document.documentElement.classList.remove('dark')
    }

    const defaultPassword = calculatePrincipalPassword(day, month)
    setPrincipalPassword(defaultPassword)
  }, [day, month])

  const toggleDarkMode = () => {
    const isDark = document.documentElement.classList.toggle('dark')
    localStorage.setItem('theme', isDark ? 'dark' : 'light')
  }

  const calculatePrincipalPassword = (d, m) => 169 * d - 13 * m + 351

  const handlePrincipalGenerate = () => {
    const d = parseInt(principalDay, 10)
    const m = parseInt(principalMonth, 10)
    if (!isNaN(d) && !isNaN(m)) {
      setPrincipalPassword(calculatePrincipalPassword(d, m))
    }
  }

  const handlePeriodicChange = (e) => {
    let value = e.target.value.replace(/\D/g, '').slice(0, 5)
    setPeriodicInput(value)

    if (value.length === 5) {
      const code = value.slice(0, 4) // descartamos o último dígito
      const prefix = code.slice(0, 2)
      const lastTwo = parseInt(code.slice(2), 10)
      const total = lastTwo + day + month + year
      let finalPrefix = parseInt(prefix, 10)
      let suffix = total

      if (total > 99) {
        finalPrefix += 1
        suffix = total % 100
      }
      setPeriodicPassword(`${finalPrefix}${suffix.toString().padStart(2, '0')}`)
    } else {
      setPeriodicPassword('')
    }
  }

  // Função de cálculo da senha na aba NewPass utilizando a nova fórmula:
  // A = (os 5 dígitos já informados no SN)
  // f(L) = 25600 - 9.2 * L
  // W = (byte1 << 8) | byte3   (byte1 = newPassHex[1], byte3 = newPassHex[3])
  // T = Math.round((63720 * W) / f(L))
  // Senha = A - T
  const calculateNewPassPassword = (sn, L, hexArray) => {
    if (!(sn && L && hexArray.every(b => b.length === 2))) return ''
    const A = parseInt(sn, 10) // Já são os 5 dígitos
    const byte1 = parseInt(hexArray[1], 16)
    const byte3 = parseInt(hexArray[3], 16)
    const W = (byte1 << 8) | byte3
    const fL = 25600 - 9.2 * parseFloat(L)
    if (fL === 0) return ''
    const C = 63720
    const T = Math.round((C * W) / fL)
    return String(A - T)
  }

  // Handler para paste em qualquer input do código HEX.
  // Se for colado um código completo (com ou sem hífens), preenche os 10 inputs.
  const handleHexPaste = (e) => {
    e.preventDefault()
    const pasted = e.clipboardData.getData('text').toUpperCase()
    // Remove todos os caracteres que não sejam dígitos hexadecimais
    const hexClean = pasted.replace(/[^A-F0-9]/g, '')
    const pairs = []
    for (let i = 0; i < hexClean.length; i += 2) {
      pairs.push(hexClean.substring(i, i + 2))
    }
    if (pairs.length === 10) {
      setNewPassHex(pairs)
      newPassHexRefs.current[9]?.focus()
    }
  }

  // Atualiza a senha na aba NewPass sempre que os inputs mudam
  useEffect(() => {
    const result = calculateNewPassPassword(newPassSN, newPassL, newPassHex)
    setNewPassPassword(result)
  }, [newPassSN, newPassL, newPassHex])

  return (
    <div className='min-h-screen bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100 p-4'>
      <Button
        variant='outline'
        onClick={toggleDarkMode}
        className='absolute top-4 right-4'
      >
        Mudar Tema
      </Button>

      <Tabs defaultValue='principal' className='max-w-md mx-auto mt-16'>
        <TabsList className='grid grid-cols-3 w-full dark:bg-gray-800'>
          <TabsTrigger value='principal'>TRBM</TabsTrigger>
          <TabsTrigger value='periodic'>Periódica</TabsTrigger>
          <TabsTrigger value='newpass'>NewPass</TabsTrigger>
        </TabsList>

        {/* Aba TRBM */}
        <TabsContent value='principal'>
          <Card className='shadow-xl rounded-2xl bg-white dark:bg-gray-800'>
            <CardContent className='p-6 space-y-6'>
              <h1 className='text-2xl font-bold text-center'>Gerador de senha</h1>
              <div className='space-y-4'>
                <div className='flex justify-between gap-4'>
                  <div className='flex flex-col items-center w-1/2 gap-1'>
                    <Label htmlFor='day'>Dia</Label>
                    <Input
                      id='day'
                      type='text'
                      inputMode='numeric'
                      pattern='[0-9]*'
                      maxLength={2}
                      className='text-center text-xl tracking-widest'
                      value={principalDay}
                      onChange={e => {
                        let val = e.target.value.replace(/\D/g, '').slice(0, 2)
                        if (val !== '') {
                          const num = Math.min(parseInt(val, 10), 31)
                          val = String(num)
                        }
                        setPrincipalDay(val)
                        if (val.length === 2) {
                          monthRef.current?.focus()
                        }
                      }}
                    />
                  </div>
                  <div className='flex flex-col items-center w-1/2 gap-1'>
                    <Label htmlFor='month'>Mês</Label>
                    <Input
                      id='month'
                      type='text'
                      inputMode='numeric'
                      pattern='[0-9]*'
                      maxLength={2}
                      className='text-center text-xl tracking-widest'
                      value={principalMonth}
                      onChange={e => {
                        let val = e.target.value.replace(/\D/g, '').slice(0, 2)
                        if (val !== '') {
                          const num = Math.min(parseInt(val, 10), 12)
                          val = String(num)
                        }
                        setPrincipalMonth(val)
                      }}
                      ref={monthRef}
                    />
                  </div>
                </div>
                <Button
                  className='w-full cursor-pointer bg-sky-800 hover:bg-sky-900 dark:bg-sky-600 dark:hover:bg-sky-700 text-lg py-6'
                  onClick={handlePrincipalGenerate}
                >
                  Gerar senha
                </Button>
                {principalPassword && (
                  <div className='text-center text-xl font-semibold'>
                    Senha:{' '}
                    <span className='text-green-600 dark:text-green-400'>
                      {principalPassword}
                    </span>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Aba Periódica */}
        <TabsContent value='periodic'>
          <Card className='shadow-xl rounded-2xl bg-white dark:bg-gray-800'>
            <CardContent className='p-6 space-y-6'>
              <h1 className='text-2xl font-bold text-center'>
                Remover Alarme manutenção periódica pendente
              </h1>
              <div className='space-y-4'>
                <div className='flex flex-col items-center gap-1'>
                  <Label htmlFor='periodic'>
                    Últimos 5 dígitos do S/N
                  </Label>
                  <Input
                    id='periodic'
                    type='text'
                    inputMode='numeric'
                    pattern='[0-9]*'
                    maxLength={5}
                    className='text-center text-xl tracking-widest'
                    value={periodicInput}
                    onChange={handlePeriodicChange}
                  />
                </div>
                {periodicPassword && (
                  <div className='text-center text-xl font-semibold'>
                    Senha:{' '}
                    <span className='text-green-600 dark:text-green-400'>
                      {periodicPassword}
                    </span>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Aba NewPass */}
        <TabsContent value='newpass'>
          <Card className='shadow-xl rounded-2xl bg-white dark:bg-gray-800'>
            <CardContent className='p-6 space-y-6'>
              <h1 className='text-2xl font-bold text-center'>NewPass</h1>
              <div className='space-y-4'>
                {/* Input para número de série: somente os 5 últimos dígitos */}
                <div className='flex flex-col gap-2'>
                  <Label htmlFor='newpass-sn'>Últimos 5 dígitos do Serial</Label>
                  <Input
                    id='newpass-sn'
                    type='text'
                    inputMode='numeric'
                    pattern='[0-9]*'
                    maxLength={5}
                    placeholder="Ex: 12345"
                    className='w-full text-center text-xl tracking-widest'
                    value={newPassSN}
                    onChange={e => setNewPassSN(e.target.value)}
                  />
                </div>
                {/* Input para litragem com largura reduzida */}
                <div className='flex flex-col gap-2'>
                  <Label htmlFor='newpass-l'>Litragem</Label>
                  <Input
                    id='newpass-l'
                    type='text'
                    inputMode='numeric'
                    pattern='[0-9]*'
                    maxLength={3}
                    placeholder="Ex: 205"
                    className='w-20 text-center text-xl tracking-widest'
                    value={newPassL}
                    onChange={e => setNewPassL(e.target.value)}
                  />
                </div>
                {/* Inputs para o código HEX completo (10 bytes) */}
                <div className='flex flex-col gap-2'>
                  <Label>
                    Código HEX completo (10 bytes, cada um com 2 dígitos, hífens inclusos)
                  </Label>
                  {/* Dividindo os 10 inputs em 2 linhas com 5 inputs cada */}
                  <div className='flex justify-center gap-1'>
                    {newPassHex.slice(0, 5).map((byte, index) => (
                      <div key={index} className="flex items-center">
                        <Input
                          ref={el => newPassHexRefs.current[index] = el}
                          type="text"
                          maxLength={2}
                          placeholder="XX"
                          className="w-12 text-center tracking-widest"
                          value={newPassHex[index]}
                          onPaste={handleHexPaste}
                          onChange={e => {
                            const val = e.target.value
                              .replace(/[^A-Fa-f0-9]/g, '')
                              .toUpperCase()
                              .slice(0, 2)
                            const newArr = [...newPassHex]
                            newArr[index] = val
                            setNewPassHex(newArr)
                            if (val.length === 2 && index < newPassHex.length - 1) {
                              newPassHexRefs.current[index + 1]?.focus()
                            }
                          }}
                        />
                        {index < 4 && <span>-</span>}
                      </div>
                    ))}
                  </div>
                  <div className='flex justify-center gap-1 mt-2'>
                    {newPassHex.slice(5, 10).map((byte, idx) => {
                      const index = idx + 5
                      return (
                        <div key={index} className="flex items-center">
                          <Input
                            ref={el => newPassHexRefs.current[index] = el}
                            type="text"
                            maxLength={2}
                            placeholder="XX"
                            className="w-12 text-center tracking-widest"
                            value={newPassHex[index]}
                            onPaste={handleHexPaste}
                            onChange={e => {
                              const val = e.target.value
                                .replace(/[^A-Fa-f0-9]/g, '')
                                .toUpperCase()
                                .slice(0, 2)
                              const newArr = [...newPassHex]
                              newArr[index] = val
                              setNewPassHex(newArr)
                              if (val.length === 2 && index < newPassHex.length - 1) {
                                newPassHexRefs.current[index + 1]?.focus()
                              }
                            }}
                          />
                          {index < newPassHex.length - 1 && <span>-</span>}
                        </div>
                      )
                    })}
                  </div>
                </div>
                {newPassPassword && (
                  <div className='text-center text-xl font-semibold'>
                    Senha:{' '}
                    <span className='text-green-600 dark:text-green-400'>
                      {newPassPassword}
                    </span>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}
